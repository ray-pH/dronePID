/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_pid_free(a: number): void;
export function __wbg_get_pid_e(a: number): number;
export function __wbg_set_pid_e(a: number, b: number): void;
export function __wbg_get_pid_diff_e(a: number): number;
export function __wbg_set_pid_diff_e(a: number, b: number): void;
export function __wbg_get_pid_int_e(a: number): number;
export function __wbg_set_pid_int_e(a: number, b: number): void;
export function __wbg_get_pid_kp(a: number): number;
export function __wbg_set_pid_kp(a: number, b: number): void;
export function __wbg_get_pid_kd(a: number): number;
export function __wbg_set_pid_kd(a: number, b: number): void;
export function __wbg_get_pid_ki(a: number): number;
export function __wbg_set_pid_ki(a: number, b: number): void;
export function pid_new(a: number, b: number, c: number): number;
export function pid_set_constants(a: number, b: number, c: number, d: number): void;
export function pid_get(a: number): number;
export function pid_update(a: number, b: number, c: number): void;
export function __wbg_v2_free(a: number): void;
export function __wbg_get_v2_x(a: number): number;
export function __wbg_set_v2_x(a: number, b: number): void;
export function __wbg_get_v2_y(a: number): number;
export function __wbg_set_v2_y(a: number, b: number): void;
export function v2_rotate(a: number, b: number): number;
export function v2_modulus(a: number): number;
export function v2_normalize(a: number): number;
export function v2_angle(a: number): number;
export function v2_dot(a: number, b: number): number;
export function v2_new(a: number, b: number): number;
export function clamp(a: number, b: number, c: number): number;
export function __wbg_drone_free(a: number): void;
export function __wbg_get_drone_pos(a: number): number;
export function __wbg_set_drone_pos(a: number, b: number): void;
export function __wbg_get_drone_angle(a: number): number;
export function __wbg_set_drone_angle(a: number, b: number): void;
export function __wbg_get_drone_angular_acc(a: number): number;
export function __wbg_set_drone_angular_acc(a: number, b: number): void;
export function __wbg_get_drone_thrust_left(a: number): number;
export function __wbg_set_drone_thrust_left(a: number, b: number): void;
export function __wbg_get_drone_thrust_right(a: number): number;
export function __wbg_set_drone_thrust_right(a: number, b: number): void;
export function __wbg_get_drone_length(a: number): number;
export function __wbg_set_drone_length(a: number, b: number): void;
export function __wbg_get_drone_mass(a: number): number;
export function __wbg_set_drone_mass(a: number, b: number): void;
export function __wbg_get_drone_inertia(a: number): number;
export function __wbg_set_drone_inertia(a: number, b: number): void;
export function __wbg_get_drone_max_force(a: number): number;
export function __wbg_set_drone_max_force(a: number, b: number): void;
export function __wbg_get_drone_gravity(a: number): number;
export function __wbg_set_drone_gravity(a: number, b: number): void;
export function drone_new(a: number, b: number, c: number, d: number, e: number): number;
export function drone_set_thrust_right(a: number, b: number): void;
export function drone_set_thrust_left(a: number, b: number): void;
export function drone_calc_acc(a: number): void;
export function drone_step_sim(a: number, b: number): void;
export function drone_step_n_sim(a: number, b: number, c: number): void;
export function __wbg_dronepids_free(a: number): void;
export function __wbg_controller_free(a: number): void;
export function __wbg_get_controller_drone(a: number): number;
export function __wbg_set_controller_drone(a: number, b: number): void;
export function __wbg_get_controller_setpoint(a: number): number;
export function __wbg_set_controller_setpoint(a: number, b: number): void;
export function controller_new(a: number): number;
export function controller_change_pid_constants(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function controller_set_setpoint(a: number, b: number, c: number): void;
export function controller_calc_target_angle(a: number): number;
export function controller_apply_control(a: number): void;
export function controller_step_n_sim(a: number, b: number, c: number): void;
